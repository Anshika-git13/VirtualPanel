{"ast":null,"code":"const express = require('express');\nconst {\n  GoogleGenerativeAI\n} = require('@google/generative-ai');\nconst router = express.Router();\n\n// Initialize Gemini AI with error handling\nlet genAI;\ntry {\n  if (!process.env.GEMINI_API_KEY) {\n    throw new Error('GEMINI_API_KEY is not set in environment variables');\n  }\n  genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n} catch (error) {\n  console.error('Failed to initialize Gemini AI:', error);\n}\n\n// Generate interview questions based on role\nrouter.post('/questions', async (req, res) => {\n  try {\n    console.log('Generating questions for:', req.body);\n    if (!genAI) {\n      return res.status(500).json({\n        error: 'AI service not initialized. Please check your API key.',\n        success: false\n      });\n    }\n    const {\n      role,\n      name\n    } = req.body;\n    if (!role || role.trim() === '') {\n      return res.status(400).json({\n        error: 'Role is required',\n        success: false\n      });\n    }\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-pro\"\n    });\n    const prompt = `Generate exactly 5 professional interview questions for a ${role.trim()} position. \n    The questions should be realistic and cover different aspects like technical skills, experience, and behavioral scenarios.\n    \n    Please respond with ONLY a JSON array in this exact format:\n    [\"Question 1 here\", \"Question 2 here\", \"Question 3 here\", \"Question 4 here\", \"Question 5 here\"]\n    \n    Do not include any other text, explanations, or formatting.`;\n    console.log('Sending prompt to Gemini:', prompt);\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    let questionsText = response.text().trim();\n    console.log('Raw Gemini response:', questionsText);\n\n    // Clean up the response\n    questionsText = questionsText.replace(/```json/g, '').replace(/```/g, '').trim();\n    let questions;\n    try {\n      questions = JSON.parse(questionsText);\n\n      // Validate that we got an array of 5 strings\n      if (!Array.isArray(questions) || questions.length !== 5) {\n        throw new Error('Invalid questions format');\n      }\n\n      // Ensure all items are strings\n      questions = questions.map(q => String(q).trim()).filter(q => q.length > 0);\n      if (questions.length !== 5) {\n        throw new Error('Not enough valid questions');\n      }\n    } catch (parseError) {\n      console.log('Failed to parse Gemini response, using fallback questions');\n\n      // Fallback questions based on role\n      const roleSpecificQuestions = {\n        'software developer': [\"Tell me about your programming background and experience with different technologies.\", \"Describe a challenging coding problem you solved recently and your approach.\", \"How do you ensure code quality and handle debugging in your projects?\", \"Explain your experience with version control and collaborative development.\", \"Where do you see yourself growing as a developer in the next few years?\"],\n        'data scientist': [\"Describe your experience with data analysis and machine learning frameworks.\", \"Walk me through your process for approaching a new data science project.\", \"How do you handle missing or inconsistent data in your analyses?\", \"Explain a complex data visualization you've created and its impact.\", \"What emerging trends in data science are you most excited about?\"],\n        'marketing manager': [\"Tell me about a successful marketing campaign you've led or contributed to.\", \"How do you measure the effectiveness of marketing initiatives?\", \"Describe your experience with digital marketing tools and platforms.\", \"How do you stay current with marketing trends and consumer behavior?\", \"Give an example of how you've handled a marketing crisis or challenge.\"]\n      };\n      const roleKey = role.toLowerCase().trim();\n      questions = roleSpecificQuestions[roleKey] || [`Tell me about yourself and your background in ${role}.`, `What interests you most about this ${role} position?`, `Describe a challenging project you've worked on in your field.`, `How do you stay updated with industry trends and developments?`, `Where do you see your career in ${role} heading in the next 5 years?`];\n    }\n    console.log('Final questions:', questions);\n    res.json({\n      success: true,\n      questions: questions\n    });\n  } catch (error) {\n    console.error('Error in questions route:', error);\n    res.status(500).json({\n      error: 'Failed to generate questions: ' + error.message,\n      success: false,\n      details: process.env.NODE_ENV === 'development' ? error.stack : undefined\n    });\n  }\n});\n\n// Analyze interview responses\nrouter.post('/analyze', async (req, res) => {\n  try {\n    console.log('Analyzing interview:', req.body);\n    if (!genAI) {\n      return res.status(500).json({\n        error: 'AI service not initialized. Please check your API key.',\n        success: false\n      });\n    }\n    const {\n      transcript,\n      role,\n      name\n    } = req.body;\n    if (!transcript || !Array.isArray(transcript) || transcript.length === 0) {\n      return res.status(400).json({\n        error: 'No interview transcript provided',\n        success: false\n      });\n    }\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-pro\"\n    });\n    const transcriptText = transcript.map((qa, index) => `Q${index + 1}: ${qa.question}\\nA${index + 1}: ${qa.answer}`).join('\\n\\n');\n    const prompt = `Analyze this interview transcript for a ${role || 'professional'} position and provide detailed feedback.\n    \n    Interview Transcript:\n    ${transcriptText}\n    \n    Please respond with ONLY a JSON object in this exact format:\n    {\n      \"overallScore\": 75,\n      \"strengths\": [\"specific strength 1\", \"specific strength 2\", \"specific strength 3\"],\n      \"weaknesses\": [\"specific weakness 1\", \"specific weakness 2\"],\n      \"improvements\": [\"specific improvement 1\", \"specific improvement 2\", \"specific improvement 3\"],\n      \"resources\": [\"specific resource 1\", \"specific resource 2\", \"specific resource 3\"],\n      \"summary\": \"Brief 2-3 sentence overall performance summary\"\n    }\n    \n    Make sure overallScore is a number between 0-100. Do not include any other text or formatting.`;\n    console.log('Sending analysis prompt to Gemini');\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    let analysisText = response.text().trim();\n    console.log('Raw analysis response:', analysisText);\n\n    // Clean up the response\n    analysisText = analysisText.replace(/```json/g, '').replace(/```/g, '').trim();\n    let analysis;\n    try {\n      analysis = JSON.parse(analysisText);\n\n      // Validate the analysis structure\n      if (!analysis.overallScore || !analysis.strengths || !analysis.weaknesses || !analysis.improvements || !analysis.resources || !analysis.summary) {\n        throw new Error('Invalid analysis format');\n      }\n\n      // Ensure score is a number\n      analysis.overallScore = Math.min(100, Math.max(0, parseInt(analysis.overallScore) || 75));\n    } catch (parseError) {\n      console.log('Failed to parse analysis response, using fallback');\n\n      // Fallback analysis\n      analysis = {\n        overallScore: 75,\n        strengths: [\"Demonstrated good communication skills during the interview\", \"Showed enthusiasm for the role and industry\", \"Provided relevant examples from experience\"],\n        weaknesses: [\"Could provide more specific technical details in responses\", \"Some answers could be more structured and concise\"],\n        improvements: [\"Practice the STAR method for behavioral questions\", \"Prepare more specific examples with quantifiable results\", \"Research the company and role more thoroughly\"],\n        resources: [\"Glassdoor for company research and interview experiences\", \"LeetCode or HackerRank for technical skill practice\", \"LinkedIn Learning courses for professional development\"],\n        summary: \"Good overall performance with clear communication. Focus on providing more specific examples and technical depth in future interviews.\"\n      };\n    }\n    console.log('Final analysis:', analysis);\n    res.json({\n      success: true,\n      analysis: analysis\n    });\n  } catch (error) {\n    console.error('Error in analysis route:', error);\n    res.status(500).json({\n      error: 'Failed to analyze interview: ' + error.message,\n      success: false,\n      details: process.env.NODE_ENV === 'development' ? error.stack : undefined\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","GoogleGenerativeAI","router","Router","genAI","process","env","GEMINI_API_KEY","Error","error","console","post","req","res","log","body","status","json","success","role","name","trim","model","getGenerativeModel","prompt","result","generateContent","response","questionsText","text","replace","questions","JSON","parse","Array","isArray","length","map","q","String","filter","parseError","roleSpecificQuestions","roleKey","toLowerCase","message","details","NODE_ENV","stack","undefined","transcript","transcriptText","qa","index","question","answer","join","analysisText","analysis","overallScore","strengths","weaknesses","improvements","resources","summary","Math","min","max","parseInt","module","exports"],"sources":["C:/Users/Asus/Desktop/VirtualPanel/frontend/src/pages/Interview.js"],"sourcesContent":["const express = require('express');\r\nconst { GoogleGenerativeAI } = require('@google/generative-ai');\r\n\r\nconst router = express.Router();\r\n\r\n// Initialize Gemini AI with error handling\r\nlet genAI;\r\ntry {\r\n  if (!process.env.GEMINI_API_KEY) {\r\n    throw new Error('GEMINI_API_KEY is not set in environment variables');\r\n  }\r\n  genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\r\n} catch (error) {\r\n  console.error('Failed to initialize Gemini AI:', error);\r\n}\r\n\r\n// Generate interview questions based on role\r\nrouter.post('/questions', async (req, res) => {\r\n  try {\r\n    console.log('Generating questions for:', req.body);\r\n    \r\n    if (!genAI) {\r\n      return res.status(500).json({ \r\n        error: 'AI service not initialized. Please check your API key.',\r\n        success: false\r\n      });\r\n    }\r\n\r\n    const { role, name } = req.body;\r\n    \r\n    if (!role || role.trim() === '') {\r\n      return res.status(400).json({ \r\n        error: 'Role is required',\r\n        success: false\r\n      });\r\n    }\r\n\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n    \r\n    const prompt = `Generate exactly 5 professional interview questions for a ${role.trim()} position. \r\n    The questions should be realistic and cover different aspects like technical skills, experience, and behavioral scenarios.\r\n    \r\n    Please respond with ONLY a JSON array in this exact format:\r\n    [\"Question 1 here\", \"Question 2 here\", \"Question 3 here\", \"Question 4 here\", \"Question 5 here\"]\r\n    \r\n    Do not include any other text, explanations, or formatting.`;\r\n\r\n    console.log('Sending prompt to Gemini:', prompt);\r\n\r\n    const result = await model.generateContent(prompt);\r\n    const response = await result.response;\r\n    let questionsText = response.text().trim();\r\n\r\n    console.log('Raw Gemini response:', questionsText);\r\n\r\n    // Clean up the response\r\n    questionsText = questionsText.replace(/```json/g, '').replace(/```/g, '').trim();\r\n    \r\n    let questions;\r\n    try {\r\n      questions = JSON.parse(questionsText);\r\n      \r\n      // Validate that we got an array of 5 strings\r\n      if (!Array.isArray(questions) || questions.length !== 5) {\r\n        throw new Error('Invalid questions format');\r\n      }\r\n      \r\n      // Ensure all items are strings\r\n      questions = questions.map(q => String(q).trim()).filter(q => q.length > 0);\r\n      \r\n      if (questions.length !== 5) {\r\n        throw new Error('Not enough valid questions');\r\n      }\r\n      \r\n    } catch (parseError) {\r\n      console.log('Failed to parse Gemini response, using fallback questions');\r\n      \r\n      // Fallback questions based on role\r\n      const roleSpecificQuestions = {\r\n        'software developer': [\r\n          \"Tell me about your programming background and experience with different technologies.\",\r\n          \"Describe a challenging coding problem you solved recently and your approach.\",\r\n          \"How do you ensure code quality and handle debugging in your projects?\",\r\n          \"Explain your experience with version control and collaborative development.\",\r\n          \"Where do you see yourself growing as a developer in the next few years?\"\r\n        ],\r\n        'data scientist': [\r\n          \"Describe your experience with data analysis and machine learning frameworks.\",\r\n          \"Walk me through your process for approaching a new data science project.\",\r\n          \"How do you handle missing or inconsistent data in your analyses?\",\r\n          \"Explain a complex data visualization you've created and its impact.\",\r\n          \"What emerging trends in data science are you most excited about?\"\r\n        ],\r\n        'marketing manager': [\r\n          \"Tell me about a successful marketing campaign you've led or contributed to.\",\r\n          \"How do you measure the effectiveness of marketing initiatives?\",\r\n          \"Describe your experience with digital marketing tools and platforms.\",\r\n          \"How do you stay current with marketing trends and consumer behavior?\",\r\n          \"Give an example of how you've handled a marketing crisis or challenge.\"\r\n        ]\r\n      };\r\n      \r\n      const roleKey = role.toLowerCase().trim();\r\n      questions = roleSpecificQuestions[roleKey] || [\r\n        `Tell me about yourself and your background in ${role}.`,\r\n        `What interests you most about this ${role} position?`,\r\n        `Describe a challenging project you've worked on in your field.`,\r\n        `How do you stay updated with industry trends and developments?`,\r\n        `Where do you see your career in ${role} heading in the next 5 years?`\r\n      ];\r\n    }\r\n\r\n    console.log('Final questions:', questions);\r\n\r\n    res.json({\r\n      success: true,\r\n      questions: questions\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in questions route:', error);\r\n    res.status(500).json({ \r\n      error: 'Failed to generate questions: ' + error.message,\r\n      success: false,\r\n      details: process.env.NODE_ENV === 'development' ? error.stack : undefined\r\n    });\r\n  }\r\n});\r\n\r\n// Analyze interview responses\r\nrouter.post('/analyze', async (req, res) => {\r\n  try {\r\n    console.log('Analyzing interview:', req.body);\r\n    \r\n    if (!genAI) {\r\n      return res.status(500).json({ \r\n        error: 'AI service not initialized. Please check your API key.',\r\n        success: false\r\n      });\r\n    }\r\n\r\n    const { transcript, role, name } = req.body;\r\n\r\n    if (!transcript || !Array.isArray(transcript) || transcript.length === 0) {\r\n      return res.status(400).json({ \r\n        error: 'No interview transcript provided',\r\n        success: false\r\n      });\r\n    }\r\n\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n    \r\n    const transcriptText = transcript.map((qa, index) => \r\n      `Q${index + 1}: ${qa.question}\\nA${index + 1}: ${qa.answer}`\r\n    ).join('\\n\\n');\r\n\r\n    const prompt = `Analyze this interview transcript for a ${role || 'professional'} position and provide detailed feedback.\r\n    \r\n    Interview Transcript:\r\n    ${transcriptText}\r\n    \r\n    Please respond with ONLY a JSON object in this exact format:\r\n    {\r\n      \"overallScore\": 75,\r\n      \"strengths\": [\"specific strength 1\", \"specific strength 2\", \"specific strength 3\"],\r\n      \"weaknesses\": [\"specific weakness 1\", \"specific weakness 2\"],\r\n      \"improvements\": [\"specific improvement 1\", \"specific improvement 2\", \"specific improvement 3\"],\r\n      \"resources\": [\"specific resource 1\", \"specific resource 2\", \"specific resource 3\"],\r\n      \"summary\": \"Brief 2-3 sentence overall performance summary\"\r\n    }\r\n    \r\n    Make sure overallScore is a number between 0-100. Do not include any other text or formatting.`;\r\n\r\n    console.log('Sending analysis prompt to Gemini');\r\n\r\n    const result = await model.generateContent(prompt);\r\n    const response = await result.response;\r\n    let analysisText = response.text().trim();\r\n\r\n    console.log('Raw analysis response:', analysisText);\r\n\r\n    // Clean up the response\r\n    analysisText = analysisText.replace(/```json/g, '').replace(/```/g, '').trim();\r\n    \r\n    let analysis;\r\n    try {\r\n      analysis = JSON.parse(analysisText);\r\n      \r\n      // Validate the analysis structure\r\n      if (!analysis.overallScore || !analysis.strengths || !analysis.weaknesses || \r\n          !analysis.improvements || !analysis.resources || !analysis.summary) {\r\n        throw new Error('Invalid analysis format');\r\n      }\r\n      \r\n      // Ensure score is a number\r\n      analysis.overallScore = Math.min(100, Math.max(0, parseInt(analysis.overallScore) || 75));\r\n      \r\n    } catch (parseError) {\r\n      console.log('Failed to parse analysis response, using fallback');\r\n      \r\n      // Fallback analysis\r\n      analysis = {\r\n        overallScore: 75,\r\n        strengths: [\r\n          \"Demonstrated good communication skills during the interview\",\r\n          \"Showed enthusiasm for the role and industry\",\r\n          \"Provided relevant examples from experience\"\r\n        ],\r\n        weaknesses: [\r\n          \"Could provide more specific technical details in responses\",\r\n          \"Some answers could be more structured and concise\"\r\n        ],\r\n        improvements: [\r\n          \"Practice the STAR method for behavioral questions\",\r\n          \"Prepare more specific examples with quantifiable results\",\r\n          \"Research the company and role more thoroughly\"\r\n        ],\r\n        resources: [\r\n          \"Glassdoor for company research and interview experiences\",\r\n          \"LeetCode or HackerRank for technical skill practice\",\r\n          \"LinkedIn Learning courses for professional development\"\r\n        ],\r\n        summary: \"Good overall performance with clear communication. Focus on providing more specific examples and technical depth in future interviews.\"\r\n      };\r\n    }\r\n\r\n    console.log('Final analysis:', analysis);\r\n\r\n    res.json({\r\n      success: true,\r\n      analysis: analysis\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in analysis route:', error);\r\n    res.status(500).json({ \r\n      error: 'Failed to analyze interview: ' + error.message,\r\n      success: false,\r\n      details: process.env.NODE_ENV === 'development' ? error.stack : undefined\r\n    });\r\n  }\r\n});\r\n\r\nmodule.exports = router;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}